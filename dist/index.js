// Generated by CoffeeScript 1.3.3
(function() {
  var _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = this._ || require('underscore');

  ((typeof module !== "undefined" && module !== null) && module || {}).exports = this.BackboneOrm = function(Backbone) {
    var BackboneOrm;
    if (Backbone == null) {
      Backbone = this.Backbone || require('backbone');
    }
    BackboneOrm = (function(_super) {

      __extends(BackboneOrm, _super);

      function BackboneOrm() {
        return BackboneOrm.__super__.constructor.apply(this, arguments);
      }

      BackboneOrm["new"] = function(attributes) {
        var model;
        model = this.cache.get(this.prototype._generateId(attributes));
        return (model != null ? model.set.apply(model, arguments) : void 0) || (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args), t = typeof result;
          return t == "object" || t == "function" ? result || child : child;
        })(this, arguments, function(){});
      };

      BackboneOrm.prototype.initialize = function() {
        BackboneOrm.__super__.initialize.apply(this, arguments);
        this._previousId = this.id = this._generateId();
        this._hookRelations();
        return this.constructor.cache.add(this);
      };

      BackboneOrm.prototype._generateId = function(attributes) {
        var index, val, vals, _i, _len, _ref;
        if (attributes == null) {
          attributes = this.attributes || {};
        }
        if (!this.compositeKey) {
          return attributes[this.idAttribute];
        }
        vals = [];
        _ref = this.compositeKey;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          index = _ref[_i];
          if ((val = attributes[index]) == null) {
            return void 0;
          }
          vals.push(val);
        }
        return vals.join('-');
      };

      BackboneOrm.prototype._hookRelations = function() {
        var group, groups, name, rel, _i, _len, _ref, _results;
        if (!this.relations) {
          return;
        }
        this.rel = {};
        groups = [];
        _ref = this.relations;
        for (name in _ref) {
          rel = _ref[name];
          if (rel.group) {
            groups.push([name, rel]);
          } else if (rel.hasOne) {
            this._hookHasOne(name, rel);
          } else if (rel.via) {
            this._hookHasManyVia(name, rel);
          } else {
            this._hookHasMany(name, rel);
          }
        }
        _results = [];
        for (_i = 0, _len = groups.length; _i < _len; _i++) {
          group = groups[_i];
          _results.push(this._hookGroup.apply(this, group));
        }
        return _results;
      };

      BackboneOrm.prototype._hookHasOne = function(name, rel) {
        var k, klass, mine, onDestroyModel, onIdChange, setModel,
          _this = this;
        klass = (k = rel.hasOne) instanceof BackboneOrm ? k : k();
        mine = rel.myFk;
        onIdChange = function() {
          return _this.set(mine, _this.rel[name].id);
        };
        onDestroyModel = function() {
          return _this.trigger('destroy', _this);
        };
        (setModel = function(next) {
          var prev;
          if (next == null) {
            next = klass["new"]({
              id: _this.get(mine)
            });
          }
          if (next.id !== _this.get(mine)) {
            return;
          }
          prev = _this.rel[name];
          if (next === prev) {
            return;
          }
          if (prev) {
            prev.off('change:id', onIdChange);
            if (rel.romeo) {
              prev.off('destroy', onDestroyModel);
            }
          }
          _this.rel[name] = next;
          next.on('change:id', onIdChange);
          if (rel.romeo) {
            return next.on('destroy', onDestroyModel);
          }
        })();
        klass.cache.on('add', setModel);
        return this.on("change:" + mine, setModel);
      };

      BackboneOrm.prototype._hookHasMany = function(name, rel) {
        var k, klass, models, theirs,
          _this = this;
        klass = (k = rel.hasMany) instanceof BackboneOrm ? k : k();
        theirs = rel.theirFk;
        models = this.rel[name] = new klass.Collection;
        klass.cache.on('add', function(model) {
          if (_this.id === model.get(theirs)) {
            return models.add(model);
          }
        });
        return models.add(klass.cache.filter(function(model) {
          return _this.id === model.get(theirs);
        }));
      };

      BackboneOrm.prototype._hookHasManyVia = function(name, rel) {
        var k, klass, mine, models, theirs, via, viaKlass,
          _this = this;
        klass = (k = rel.hasMany) instanceof BackboneOrm ? k : k();
        viaKlass = (k = rel.via) instanceof BackboneOrm ? k : k();
        mine = rel.myViaFk;
        theirs = rel.theirViaFk;
        models = this.rel[name] = new klass.Collection;
        via = models.via = new viaKlass.Collection;
        klass.cache.on('add', function(model) {
          if (_this.id === model.get(mine)) {
            return models.add(model);
          }
        });
        viaKlass.cache.on('add', function(model) {
          if (_this.id === model.get(mine)) {
            via.add(model);
            return models.add(klass["new"]({
              id: model.get(theirs)
            }));
          }
        });
        via.on('remove', function(model) {
          return models.remove(models.get(model.get(theirs)));
        });
        models.on('add', function(model) {
          var attributes;
          attributes = {};
          attributes[mine] = _this.id;
          attributes[theirs] = model.id;
          return via.add(viaKlass["new"](attributes));
        }).on('remove', function(model) {
          return via.remove(via.find(function(model2) {
            return model.id === model2.get(theirs);
          }));
        });
        return via.add(viaKlass.cache.filter(function(model) {
          return _this.id === model.get(mine);
        }));
      };

      BackboneOrm.prototype._hookGroup = function(name, group) {
        var k, klass, rel, _results;
        klass = (k = this.relations[group[0]].hasMany) instanceof BackboneOrm ? k : k();
        group = this.rel[name] = new klass.Collection;
        _results = [];
        for (rel in group) {
          group.add(this.rel[rel].models);
          _results.push(rel.on('add', function(model) {
            return group.add(model);
          }).on('remove', function(model) {
            return group.remove(model);
          }));
        }
        return _results;
      };

      BackboneOrm.prototype.via = function(rel, id) {
        var group, via, _i, _len,
          _this = this;
        if (id.id != null) {
          id = id.id;
        }
        if (group = this.relations[rel].group) {
          for (_i = 0, _len = group.length; _i < _len; _i++) {
            rel = group[_i];
            if (via = this.via(rel, id)) {
              return via;
            }
          }
          return void 0;
        }
        return this.rel[rel].via.find(function(model) {
          return id === model.get(_this.relations[rel].theirViaFk);
        });
      };

      BackboneOrm.prototype.change = function() {
        this._previousId = this.id;
        this.id = this._generateId();
        return BackboneOrm.__super__.change.apply(this, arguments);
      };

      return BackboneOrm;

    })(Backbone.Model);
    BackboneOrm.Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = BackboneOrm;

      Collection.prototype._onModelEvent = function(event, model, collection, options) {
        if (model && event === 'change' && model.id !== model._previousId) {
          delete this._byId[model._previousId];
          if (model.id != null) {
            this._byId[model.id] = model;
          }
        }
        return Collection.__super__._onModelEvent.apply(this, arguments);
      };

      Collection.prototype.save = function() {
        var args;
        args = arguments;
        return this.each(function(model) {
          return model.save.apply(model, args);
        });
      };

      Collection.prototype.fetch = function() {
        var args;
        args = arguments;
        return this.each(function(model) {
          return model.fetch.apply(model, args);
        });
      };

      Collection.prototype.destroy = function() {
        var args;
        args = arguments;
        return this.each(function(model) {
          return model.destroy.apply(model, args);
        });
      };

      return Collection;

    })(Backbone.Collection);
    return BackboneOrm;
  };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.BackboneOrm = this.BackboneOrm();
  }

}).call(this);
