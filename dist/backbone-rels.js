// Generated by CoffeeScript 1.3.3
(function() {
  var _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = this._ || require('underscore');

  ((typeof module !== "undefined" && module !== null) && module || {}).exports = this.BackboneRels = function(Backbone) {
    var Collection, Model, getModel;
    if (Backbone == null) {
      Backbone = this.Backbone || require('backbone');
    }
    getModel = function(val) {
      if (val instanceof Model) {
        return val;
      } else {
        return val();
      }
    };
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model["new"] = function(attributes) {
        var model;
        model = this.cache.get(this.prototype._generateId(attributes));
        return (model != null ? model.set.apply(model, arguments) : void 0) || (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args), t = typeof result;
          return t == "object" || t == "function" ? result || child : child;
        })(this, arguments, function(){});
      };

      Model.prototype.initialize = function() {
        Model.__super__.initialize.apply(this, arguments);
        this._previousId = this.id = this._generateId();
        this.constructor.cache.add(this);
        return this._hookRels();
      };

      Model.prototype._generateId = function(attributes) {
        var index, val, vals, _i, _len, _ref;
        if (attributes == null) {
          attributes = this.attributes || {};
        }
        if (!this.compositeKey) {
          return attributes[this.idAttribute];
        }
        vals = [];
        _ref = this.compositeKey;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          index = _ref[_i];
          if ((val = attributes[index]) == null) {
            return void 0;
          }
          vals.push(val);
        }
        return vals.join('-');
      };

      Model.prototype._hookRels = function() {
        var name, rel, _ref, _results;
        if (!this.rels) {
          return;
        }
        this.get = _.bind(this.get, this);
        this.set = _.bind(this.set, this);
        _ref = this.rels;
        _results = [];
        for (name in _ref) {
          rel = _ref[name];
          if (rel.hasOne) {
            _results.push(this._hookHasOne(name, rel));
          } else if (rel.via) {
            _results.push(this._hookHasManyVia(name, rel));
          } else {
            _results.push(this._hookHasMany(name, rel));
          }
        }
        return _results;
      };

      Model.prototype._hookHasOne = function(name, rel) {
        var k, klass, mine, onDestroyModel,
          _this = this;
        klass = (k = rel.hasOne) instanceof Model ? k : k();
        mine = rel.myFk;
        onDestroyModel = function() {
          if (rel.romeo) {
            return _this.trigger('destroy', _this, _this.collection);
          } else {
            return _this.set(mine, null);
          }
        };
        this.set[name] = function(next) {
          var prev;
          prev = _this.get[name];
          if (next === prev) {
            return;
          }
          if (prev) {
            prev.off('destroy', onDestroyModel);
          }
          _this.get[name] = next;
          _this.set(mine, next != null ? next.id : void 0);
          if (next) {
            return next.on('destroy', onDestroyModel);
          }
        };
        if (this.get(mine)) {
          this.set[name](klass["new"]({
            id: this.get(mine)
          }));
        }
        klass.cache.on('add', function(model) {
          if (model.id === _this.get(mine)) {
            return _this.set[name](model);
          }
        });
        return this.on("change:" + mine, function() {
          return _this.set[name](_this.get(mine) ? klass["new"]({
            id: _this.get(mine)
          }) : void 0);
        });
      };

      Model.prototype._hookHasMany = function(name, rel) {
        var klass, models, theirs,
          _this = this;
        klass = getModel(rel.hasMany);
        theirs = rel.theirFk;
        models = this.get[name] = new klass.Collection;
        models.url = function() {
          return "" + ((typeof _this.url === "function" ? _this.url() : void 0) || _this.url) + (rel.url || ("/" + name));
        };
        (models.filters = {})[theirs] = this;
        klass.cache.on("add change:" + theirs, function(model) {
          if (_this.id === model.get(theirs)) {
            return models.add(model);
          }
        });
        models.on("change:" + theirs, function(model) {
          return models.remove(model);
        });
        return models.add(klass.cache.filter(function(model) {
          return _this.id === model.get(theirs);
        }));
      };

      Model.prototype._hookHasManyVia = function(name, rel) {
        var klass, mine, models, theirs, via, viaKlass,
          _this = this;
        klass = getModel(rel.hasMany);
        viaKlass = getModel(rel.via);
        mine = rel.myViaFk;
        theirs = rel.theirViaFk;
        models = this.get[name] = new klass.Collection;
        models.url = function() {
          return "" + ((typeof _this.url === "function" ? _this.url() : void 0) || _this.url) + (rel.url || ("/" + name));
        };
        via = models.via = new viaKlass.Collection;
        via.url = function() {
          return "" + ((typeof _this.url === "function" ? _this.url() : void 0) || _this.url) + viaKlass.Collection.prototype.url;
        };
        (via.filters = {})[mine] = this;
        viaKlass.cache.on('add', function(model) {
          if (_this.id === model.get(mine)) {
            return via.add(model);
          }
        });
        via.on('add', function(model) {
          return models.add(klass["new"]({
            id: model.get(theirs)
          }));
        }).on('remove', function(model) {
          return models.remove(models.get(model.get(theirs)));
        });
        klass.cache.on('add', function(model) {
          if (via.find(function(model2) {
            return model2.get(theirs === model.id);
          })) {
            return models.add(model);
          }
        });
        models.on('add', function(model) {
          var attributes;
          attributes = {};
          attributes[mine] = _this.id;
          attributes[theirs] = model.id;
          return via.add(viaKlass["new"](attributes));
        }).on('remove', function(model) {
          return via.remove(via.find(function(model2) {
            return model.id === model2.get(theirs);
          }));
        });
        return via.add(viaKlass.cache.filter(function(model) {
          return _this.id === model.get(mine);
        }));
      };

      Model.prototype.via = function(rel, id) {
        var _this = this;
        if (id != null ? id.id : void 0) {
          id = id.id;
        }
        return this.get[rel].via.find(function(model) {
          return id === model.get(_this.rels[rel].theirViaFk);
        });
      };

      Model.prototype.change = function() {
        this._previousId = this.id;
        this.id = this._generateId();
        return Model.__super__.change.apply(this, arguments);
      };

      Model.setup = function() {
        this.Collection.model = this;
        return this.cache = new this.Collection;
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype._onModelEvent = function(event, model, collection, options) {
        if (model && event === 'change' && model.id !== model._previousId) {
          delete this._byId[model._previousId];
          if (model.id != null) {
            this._byId[model.id] = model;
          }
        }
        return Collection.__super__._onModelEvent.apply(this, arguments);
      };

      Collection.prototype.fetch = function(options) {
        var success,
          _this = this;
        options = options ? _.clone(options) : {};
        success = options.success;
        options.success = function(resp, status, xhr) {
          var attrs, models, _i, _len, _ref;
          models = [];
          _ref = _this.parse(resp);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            attrs = _ref[_i];
            models.push = _this.model["new"](attrs);
          }
          if (!options.add) {
            _this.remove(_this.models);
          }
          _this.add(resp);
          if (typeof success === "function") {
            success(_this, resp, options);
          }
          return _this.trigger('sync', _this, resp, options);
        };
        options.error = Backbone.wrapError(options.error, this, options);
        return (this.sync || Backbone.sync)('read', this, options);
      };

      Collection.prototype.save = function(options) {
        var success,
          _this = this;
        options = options ? _.clone(options) : {};
        success = options.success;
        if (!this.length) {
          return typeof success === "function" ? success(this, [], options) : void 0;
        }
        options.success = function(resp, status, xhr) {
          var attrs, i, _i, _len, _ref;
          _ref = _this.parse(resp);
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            attrs = _ref[i];
            _this.at(i).set(attrs, xhr);
          }
          if (typeof success === "function") {
            success(_this, resp, options);
          }
          return _this.trigger('sync', _this, resp, options);
        };
        options.error = Backbone.wrapError(options.error, this, options);
        return (this.sync || Backbone.sync)('update', this, options);
      };

      Collection.prototype.destroy = function(options) {
        var success;
        options = options ? _.clone(options) : {};
        success = options.success;
        options.success = function(resp) {
          var model, _i, _len, _ref;
          _ref = this.models;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            model = _ref[_i];
            model.trigger('destroy', model, model.collection, options);
          }
          if (typeof success === "function") {
            success(this, resp, options);
          }
          return this.trigger('sync', this, resp, options);
        };
        options.error = Backbone.wrapError(options.error, this, options);
        return (this.sync || Backbone.sync)('delete', this, options);
      };

      return Collection;

    })(Backbone.Collection);
    return {
      Model: Model,
      Collection: Collection
    };
  };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.BackboneRels = this.BackboneRels();
  }

}).call(this);
